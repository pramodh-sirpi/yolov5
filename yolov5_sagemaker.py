# -*- coding: utf-8 -*-
"""yolov5-sagemaker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nTcocTlAvfREXl8DGcjIGobLtJpew_zH
"""

import os
import tensorflow as tf
from tensorflow.keras import backend
from sagemaker.tensorflow import TensorFlowModel

ls

!cd yolov5

#!git clone https://github.com/ultralytics/yolov5
#!cd yolov5
!pip install -r requirements.txt
#!python export.py --weights yolov5l.pt --include saved_model --nms
#!mkdir export && mkdir export/Servo
#!mv yolov5l_saved_model export/Servo/1
#!tar -czvf model.tar.gz export
#!aws s3 cp model.tar.gz "s3://drivex-label/model.tar.gz"

model_data = 's3://drivex-label/model.tar.gz'
role = 'arn:aws:iam::920644990528:role/mlops'

model = TensorFlowModel(model_data=model_data, 
                        framework_version='2.8', role=role)

INSTANCE_TYPE = 'ml.m5.xlarge'
ENDPOINT_NAME = 'yolov5-reprex'

predictor = model.deploy(initial_instance_count=1, 
                         instance_type=INSTANCE_TYPE,
                         endpoint_name=ENDPOINT_NAME)

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import cv2
import json
import boto3, botocore

def prep_image(img_path):
    img = cv2.imread(img_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    height,width = img.shape[0], img.shape[1]

    top_pad = bot_pad = height % 640 // 2
    left_pad = right_pad = width % 640 // 2

    img_padded = cv2.copyMakeBorder(img, top_pad, bot_pad, left_pad, right_pad, cv2.BORDER_CONSTANT, value=[114,114,114])
    img_padded_and_resized = cv2.resize(img_padded,(640,640))
    #calculate border padding

    #img = cv2.resize(img, (4032,3040))

    #plt.imshow(img_padded_and_resized)
    return img_padded_and_resized

img = prep_image('0a2ccc69-IMG_0473.jpeg')

plt.figure(figsize=(10,10))
plt.imshow(img)
plt.axis('off')

config = botocore.config.Config(read_timeout=500)
runtime = boto3.client('runtime.sagemaker', config=config)

data = np.array(img.astype(np.float16)/255.)
payload = json.dumps([data.tolist()])

response = runtime.invoke_endpoint(EndpointName='yolov5-reprex', ContentType='application/json', Body=payload)

result = json.loads(response['Body'].read().decode())

indices = np.where(np.array(result['predictions'][0]['output_1']) > 0.5)
xywh = np.array(result['predictions'][0]['output_0'])[indices]
xywh[:,0] *= 640
xywh[:,1] *= 640
xywh[:,2] *= 640
xywh[:,3] *= 640
xywh = xywh.astype(int)

scores = np.array(result['predictions'][0]['output_1'])[indices]
classes = np.array(result['predictions'][0]['output_2'])[indices]

class_names = ["defect","non-defect"]

FONT = cv2.FONT_HERSHEY_SIMPLEX
FONTSCALE = .6
WHITE = (255, 255, 255)
THICKNESS = 2
for idx, rect in enumerate(xywh):
    img = cv2.rectangle(img,
              (rect[0], rect[1]-5),
              (rect[2], rect[3]), thickness=2, color = (255,0,0))
    
    class_idx = int(classes[idx])
    img = cv2.putText(img, 
                      f'{class_names[class_idx]}: {scores[idx]:0.3f}',
                      (rect[0],rect[1]),
                      FONT,
                      FONTSCALE,
                      WHITE,
                      THICKNESS)

plt.figure(figsize=(10,10))
plt.imshow(img)
plt.axis('off')

